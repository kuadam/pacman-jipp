#pragma once
#include <SFML/Graphics.hpp>
#include <memory>
#include <iostream>

class Map
{
	std::vector<std::vector<int>> uklad_mapy_
	{
		{ 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2 },
		{ 2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2 },
		{ 2,0,2,0,2,2,0,2,2,2,2,2,2,2,0,2,0,2,0,2,2,2,2,0,2 },
		{ 2,0,2,0,0,2,0,2,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,2 },
		{ 2,0,2,2,0,2,0,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2 },
		{ 2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2 },
		{ 2,0,2,2,2,2,2,2,2,0,2,2,-1,2,2,0,2,2,2,0,2,0,2,0,2 },
		{ 2,0,2,0,0,0,0,0,0,0,2,-1,-1,-1,2,0,2,0,0,0,2,0,2,0,2 },
		{ 2,0,2,0,2,2,0,2,2,0,2,2,2,2,2,0,2,0,2,2,2,0,2,0,2 },
		{ 2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,2,0,0,0,2,0,2 },
		{ 2,0,2,2,2,2,2,2,0,2,0,2,0,2,2,0,2,0,2,0,2,2,2,0,2 },
		{ 2,0,2,0,0,0,0,0,0,2,0,0,0,0,2,0,2,0,2,0,2,0,0,0,2 },
		{ 2,0,2,0,2,0,2,0,2,2,2,0,2,0,2,0,0,0,0,0,0,0,2,0,2 },
		{ 2,0,2,0,2,0,2,0,0,0,2,0,2,0,2,0,2,2,2,2,2,2,2,0,2 },
		{ 2,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,2 },
		{ 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2 },
		//16 x 25
	};
	std::vector<std::vector<int>> uklad_mapy2_
	{
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2},
		{2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2},
		{2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2},
		{2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2},
		{2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2},
		{2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, -1, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2},
		{2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, -1, -1, -1, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2},
		{2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2},
		{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
		{2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2},
		{2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2},
		{2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2},
		{2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2},
		{2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	};

	sf::Sprite tile_;
	std::shared_ptr<sf::Texture> texture_ = std::make_shared<sf::Texture>();
	std::shared_ptr<std::vector<std::vector<int>>> mapa_ = std::make_shared<std::vector<std::vector<int>>>(uklad_mapy_);
public:
	Map();
	void draw(sf::RenderWindow& window);
	std::shared_ptr<std::vector<std::vector<int>>> uklad() const { return mapa_; }
	void setLevel(const int &lvl);

	int mapaSizeX() const { return (*mapa_)[0].size(); }
	int mapaSizeY() const { return mapa_->size(); }
	int Point(const int &x, const int &y) const { return (*mapa_)[x][y]; }

	sf::Sprite getTile() const { return tile_; }
	void setPositionTile(int x, int y);
	void TileTextureRect(sf::IntRect x);

	void zebrano_punkt(int x, int y);
};
